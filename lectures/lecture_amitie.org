#+TITLE:  Fonctions amies
#+AUTHOR: Xavier Garrido
#+DATE:   23/09/2013
#+OPTIONS: toc:nil ^:{}
#+LATEX_HEADER: \setcounter{chapter}{6}

De par l'encapsulation des données, les fonctions extérieures à une classe
n'ont pas accès aux membres privés de cette classe... à l'exception *des
fonctions amies*.

En effet en déclarant une fonction amie d'une classe =A=, cette fonction a accès
à tous les membres de =A=, tout comme le ferait une méthode de =A=.

La "déclaration d'amitié" permet donc de déclarer dans une classe, les fonctions
que l'on autorise à accéder à ses membres privés. Conceptuellement, cette notion
va à l'encontre de l'encapsulation des données; les fonctions amies ne sont jamais
indispensables, elles sont juste pratiques.

La syntaxe fait intervenir le mot clé =friend= et l'on distingue trois cas de
figures selon la nature de la fonction

1. Fonction extérieure amie d'une classe =A=

   #+BEGIN_SRC c++
     class A
     {
       ...
       friend type nom_fonction_extérieure(...);
       ...
     };
   #+END_SRC

2. Fonction membre d'une classe =B=, amie de la classe =A=

   #+BEGIN_SRC c++
     class A
     {
       ...
       friend type B::nom_méthode_de_A(...);
       ...
     };
   #+END_SRC

3. Toutes les méthodes d'une classe =B= sont amies de la classe =A=

   #+BEGIN_SRC c++
     class A { ...  friend class B; ...  };
   #+END_SRC

#+LATEX: \newpage\subsubsection{
Remarques :
#+LATEX: }

- On déclare souvent une fonction amie d'une classe =A= lorsque la fonction amie
  renvoie un objet de la classe =A=

- Il est parfois nécessaire d'indiquer au compilateur que la déclaration de la
  classe n'interviendra que plus loin dans le code. Dans ce cas, il faut user
  d'une déclaration "en amont" (/forward declaration/ en anglais) /via/
  l'instruction =class nom_classe;=

- Si deux classes =A= et =B= sont amies, les objet de =A= ne peuvent pas accéder
  aux membres de =B=. Ce sont les méthodes de =A= qui peuvent accéder aux
  membres de =B=
