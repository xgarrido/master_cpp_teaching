#+TITLE:  Classe "aléatoire"
#+AUTHOR: Xavier Garrido
#+DATE:   18/09/2013
#+OPTIONS: toc:nil
#+LATEX_HEADER: \setcounter{chapter}{4}

* COMMENT Constructeur de la classe =Complexe=

- Reprendre l'exercice précédent sur la classe =Complexe= en remplaçant la
  méthode =Initialise= par un constructeur.

- Déclarer un second constructeur qui initialisera, non plus la partie réelle et
  imaginaire, mais le module et l'argument d'un nombre complexe. Quelle
  alternative pourra-t-on proposer afin de résoudre le problème de surdéfinition
  du constructeur dans ce cas précis ?

* Jeux de hasard et loi de probabilité

** Déclaration de la classe =hasard=

- Écrire une classe =hasard= possédant les membres suivants :

  - deux entiers constants non signés, l'un définissant un nombre maximal de
    valeurs à tirer aléatoirement, l'autre la valeur maximale pouvant être
    générée aléatoirement (/cf. [[Addendum 1][Addendum 1]]/ relatif aux générateurs aléatoires),

  - un tableau dynamique de valeurs entières non signées qui sauvegardera les
    résultats des tirages aléatoires successifs.

- Déclarer un constructeur qui initialisera les membres de la classe en
  attachant une attention particulière à allouer correctement l'espace mémoire
  nécessaire.

- Déclarer un destructeur de classe qui restituera l'espace mémoire alloué
  dynamiquement.

- Surdéfinir une méthode permettant d'afficher soit l'ensemble des tirages
  aléatoires soit le \(i\)^ème tirage.

- Définir une méthode de comparaison de deux instances de =hasard= retournant un
  booléen dont la valeur sera soit =true= soit =false= selon que les deux
  instances sont identiques ou pas.

Exécuter plusieurs fois le programme en affichant l'ensemble des valeurs
générées. Proposer une solution visant à générer, pour chaque exécution, une
nouvelle série de valeurs aléatoires.

** Correction                                                   :correction:
Ci-dessous la déclaration de la classe =hasard= à placer dans le fichier =hasard.h=

#+BEGIN_SRC C++ -n
  #ifndef _hasard_h_
  #define _hasard_h_ 1

  class hasard {
  public:
    // Constructeur par défaut
    hasard();

    // Constructeur surchargé
    hasard(const unsigned int nbr_max_, const unsigned int val_max_);

    // Destructeur
    ~hasard();

    // Méthode d'affichage
    void affiche() const;

    // Méthode affichant uniquement le ième tirage
    void affiche(const unsigned int i_) const;

    // Comparaison de l'objet courant avec un second objet de type hasard
    bool compare(const hasard & h_);

  private:
    const unsigned int m_nbr_max;   // Nombre maximal de valeurs à tirer
    const unsigned int m_val_max;   // Valeur maximale à tirer
    unsigned int * m_random_values; // Tableur des valeurs tirées
  };
  #endif
#+END_SRC

Le fichier =fraction.cc= de définition de la classe =hasard= peut se présenter sous
la forme suivante :

#+BEGIN_SRC C++ -n
  #include "hasard.h"

  #include <iostream>
  using namespace std;

  hasard::hasard() : m_nbr_max(0), m_val_max(0), m_random_values(0)
  {
  }

  hasard::hasard(const unsigned int nbr_max_, const unsigned int val_max_) :
    m_nbr_max(nbr_max_), m_val_max(val_max_),
    m_random_values(new unsigned int[nbr_max_])
  {
  }

  hasard::~hasard()
  {
    // Only delete if the pointer is allocated
    if (m_random_values) {
      delete[] m_random_values;
    }
  }

  void hasard::affiche() const
  {
    for (unsigned int i = 0; i < m_nbr_max; i++) {
      cout << "valeur[" << i << "] = " << m_random_values[i] << endl;
    }
  }

  void hasard::affiche(const unsigned int i_) const
  {
    if (i_ >= m_nbr_max) {
      cerr << "ERREUR: Indice trop grand : " << i_ << ">" << m_nbr_max << endl;
      return;
    }
    cout << "valeur[" << i_ << "] = " << m_random_values[i_] << endl;
  }

  bool hasard::compare(const hasard & h_) const
  {
    if (m_nbr_max != h_.m_nbr_max) return false;

    for (unsigned int i = 0; i < m_nbr_max; i++) {
      if (m_random_values[i] != h_.m_random_values[i]) return false;
    }
    return true;
  }
#+END_SRC

** Décompte du nombre d'instanciation de la classe =hasard=

En utilisant un membre statique (/cf. [[Addendum 2][Addendum 2]]/), déterminer le nombre
d'objets créés au cours de l'exécution du programme.

De la même manière, utiliser un membre statique afin d'estimer le nombre total
d'occurences de la valeur 0.

*** Addendum 1

La librairie standard =cstdlib= du \Cpp fournit un générateur de nombre
pseudo-aléatoire =rand()= retournant une valeur entière comprise entre 0 et
=RAND_MAX=. Suivant les architectures, =RAND_MAX= peut varier d'une machine à
l'autre. Par ailleurs, comme un générateur de nombres aléatoires est exécuté sur
un ordinateur par nature déterministe, il devient /de facto/ un algorithme
déterministe. Ses sorties sont inévitablement entachées d'une caractéristique
absente d'une vraie suite aléatoire : la périodicité. Avec des ressources
limitées (mémoire, nombre de registres, ...), le générateur retrouvera le même
état interne. Un générateur non périodique n'est pas impossible, mais nécessite
une mémoire croissante pour ne pas se retrouver dans le même état. Pour
contourner cet obstacle théorique, le générateur peut commencer dans un état
quelconque (la "graine", /seed/ en anglais). L'initialisation se fait par
l'intermédiaire de la méthode =srand(int seed)= qui prend pour argument la
graine. Il produira toutefois la même séquence de nombres aléatoires si la graine
reste identique.

*** Addendum 2

Les différentes instances d'une classe ont toutes les mêmes méthodes. Mais
chaque instance a ses propres membres. Un membre statique est, par définition,
un *membre qui est le même*, /i.e./ situé dans le même espace mémoire, pour
toutes les instances de la classe. La syntaxe de sa déclaration est la suivante:

#+BEGIN_SRC c++
  class nom_classe {
    ...
    static type nom_variable_statique;
    ...
  };
#+END_SRC

Un membre statique doit être initialisé explicitement dans le fichier =.cc=
correspondant à la classe, avec la syntaxe suivante:

#+BEGIN_SRC c++
  type nom_classe::nom_variable_statique = valeur_initiale;
#+END_SRC
